ListNode* reverse(ListNode *head)
    {
        ListNode *pre=NULL;
        ListNode *next=NULL;
        while(head!=NULL)
        {
            next=head->next;
            head->next=pre;
            pre=head;
            head=next;
        }
        return pre;
    }
    bool isPalindrome(ListNode* head) {
        ListNode *slow=head;
        ListNode *fast=head;
        while(fast->next!=NULL && fast->next->next!=NULL)
        {
            fast=fast->next->next;
            slow->next;
        }
        slow->next=reverse(slow->next);
        slow=slow->next;
        while(slow!=NULL)
        {
            if(head->val !=slow->val)
            {
                return false;
            }
            head=head->next;
            slow=slow->next;
        }
        return true;
        
    }
    
    
    
    
    first of all witht the help of fast and slow pointer we will reach the mid of linked list
    than we will reverse the linked list from mid to the end 
    then we will iterate with two pointers one from the head other from the mid
    if both stays equal until mid reaches null we have a palindromic linked list
