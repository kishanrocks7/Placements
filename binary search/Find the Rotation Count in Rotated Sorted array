int findKRotation(int arr[], int n) {
    int low = 0, high = n-1;
    int k = low + (high-low)/2;
  

    while(low<=high){
        int mid = low + (high-low)/2;
        int next = (mid+1)%n; int prev = (mid-1+n)%n;
        if(arr[prev]>=arr[mid] && arr[mid]<=arr[next]) return mid;
        else {
               if(arr[mid]>=arr[low] && arr[mid]<=arr[high]){ return low; } // Increasing order. Normal cases no rotation
               else if(arr[mid]>=arr[low]) low=mid+1;
               else if(arr[mid]<=arr[high]) high=mid-1;
           }
    }
    return 0;
}
