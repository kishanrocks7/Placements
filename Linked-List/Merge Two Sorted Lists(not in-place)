ListNode* mergeTwoLists(ListNode* l1, ListNode* l2) {
        ListNode* c1;
ListNode* c2;
ListNode* head= new ListNode();
ListNode* c3=head ;

    c1=l1;
    c2=l2;
    while(c1!=NULL && c2!=NULL){
        if(c1->val >= c2->val){
            c3->next=c2;
            c2=c2->next;
            c3=c3->next;
        }
        else if(c2->val > c1->val){
            c3->next=c1;
            c1=c1->next;
            c3=c3->next;
        }
       
    }
    if(c1!=NULL) c3->next=c1;
    else c3->next=c2;
    return head->next;
    }
    
    or
    
    ListNode* mergeTwoLists(ListNode* l1, ListNode* l2) {
        if(l1==NULL) return l2;
        if(l2==NULL) return l1;
        if(l1->val>l1->val)
        {
            swap(l1,l2);
        }
        ListNode* res=l1;
        while(l1!=NULL && l2!=NULL)
        {
            ListNode *temp=NULL;
            while(l1!=NULL && l1->val<=l2->val)
            {
                temp=l1;
                l1=l1->next;
            }
            temp->next=l2;
            swap(l1,l2);
        }
        return res;
        
    }
    
    what we are doing her is , we will take two pointer pointing to l1 and l2 and we will keep l1 at the smaller node otherwise
    if we finds l1 greater than l2 wil swap.    
    if l1 is null we have l2 as our answer
    if l2 is null we have l1 as our answer.
    if l1>l2 we will swap 
    
    crearte a node res and point to l1;
    until l1 and l2 both are not null we will creeate a temp node;
    and with condition that l1 not null and l1<l2
    we will point temp to l1
    move l1 to its next;
    
    when l1 is no more smaller than l2 we will point temp to l2 and swap(l1,l2) to start pointing l1 to the smaller one.
    finally retunr the result

    otherwise we will iterate until c1 reaches null and c2 reaches null
    
    
    
