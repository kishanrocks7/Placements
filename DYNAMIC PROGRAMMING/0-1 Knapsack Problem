using recursion

int knapSack(int W, int wt[], int val[], int n)
{
 
    // Base Case
    if (n == 0 || W == 0)
        return 0;
 
    // If weight of the nth item is more
    // than Knapsack capacity W, then
    // this item cannot be included
    // in the optimal solution
    if (wt[n - 1] > W)
        return knapSack(W, wt, val, n - 1);
 
    // Return the maximum of two cases:
    // (1) nth item included
    // (2) not included
    else
        return max(
            val[n - 1]
                + knapSack(W - wt[n - 1],
                           wt, val, n - 1),
            knapSack(W, wt, val, n - 1));
}
 
// Driver code
int main()
{
    int val[] = { 60, 100, 120 };
    int wt[] = { 10, 20, 30 };
    int W = 50;
    int n = sizeof(val) / sizeof(val[0]);
    cout << knapSack(W, wt, val, n);
    return 0;
}


using DP top down

int knapSack(int W, int wt[], int val[], int n)
{
       int t[n+1][W+1];
           for(int i=0; i<(n+1);i++){
            for(int j=0; j<(W+1);j++){
                if(i==0 || j==0){
                    t[i][j]= 0;
                    }
                 }
             }
            for(int i=1; i<(n+1);i++){
                for(int j=1; j<(W+1);j++){
                    if(wt[i-1]<=j){
                        t[i][j]=max(val[i-1]+t[i-1][j-wt[i-1]], t[i-1][j]);
                    }
                    else{
                         t[i][j]= t[i-1][j];
                    }
                }
                }
       return t[n][W];
}
