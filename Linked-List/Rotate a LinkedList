ListNode* rotateRight(ListNode* head, int k) {
        if(head==NULL || head->next==NULL || k==0)
        {
            return head;
        }
        ListNode *temp=head;
        int count=1;
        while(temp->next!=NULL)
        {
            count++;
            temp=temp->next;
        }
        temp->next=head;
        k=k%count;
        k=count-k;
        for(int i=0;i<k;i++)
        {
            temp=temp->next;
        }
        head=temp->next;
        temp->next=NULL;
        return head;
          }


first of all we will chek boundary conditon as head=null head->next=null or k=0
then we will retun head
otherwise we will first find the size of linked list
then we will change k to k%n and subtract it from the count, to optimise our solution ie if k is grater than length of linked list
then we will make a pointer pointing to head and we will move the pointer k times to its next and finally we will make head equal to the last pointer and we will point tmep to NULL
