using recursion


 
/* Returns length of LCS for X[0..m-1], Y[0..n-1] */
int lcs( char *X, char *Y, int m, int n )
{
    if (m == 0 || n == 0)
        return 0;
    if (X[m-1] == Y[n-1])
        return 1 + lcs(X, Y, m-1, n-1);
    else
        return max(lcs(X, Y, m, n-1), lcs(X, Y, m-1, n));
}


using dp memoization

int dp[1001][1001];
int lcs( char *X, char *Y, int m, int n )
{
    if (m == 0 || n == 0)
        return 0;
    if(dp[m][n]!=-1)
        return dp[m][n];
    if (X[m-1] == Y[n-1])
        return dp[n][m]= 1 + lcs(X, Y, m-1, n-1);
    else
        return dp[n][m]= max(lcs(X, Y, m, n-1), lcs(X, Y, m-1, n));
}


using DP top down

int dp[1001][1001];
    
    int solve(int x,int y,string s1,string s2)
    {
        if(x==-1 || y==-1)
        {
            return 0;
        }
        if(dp[x][y]!=-1)
        {
            return dp[x][y];
        }
        if(s1[x]==s2[y])
        {
            return dp[x][y]==1+solve(x-1,y-1,s1,s2);
        }
        int a=solve(x-1,y,s1,s2);
        int b=solve(x,y-1,s1,s2);
        return dp[x][y]=max(a,b);
    }
    //Function to find the length of longest common subsequence in two strings.
    int lcs(int x, int y, string s1, string s2)
    {
        memset(dp,-1,sizeof(dp));
        return solve(x-1,y-1,s1,s2);
    }
