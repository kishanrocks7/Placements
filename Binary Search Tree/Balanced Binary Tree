int height(TreeNode * root)
    {
        if(root==NULL)
        {
            return 0;
        }
        int L=max(height(root->left)+1,height(root->right)+1);
        return L;
    }
    bool isBalanced(TreeNode* root) {
        if(root==NULL)
        {
            return true;
        }
        return isBalanced(root->left) && isBalanced(root->right) && abs(height(root->left)-height(root->right))<=1;
        
    }

here what we can do is we will use recursion at first to return height from a particular node using height function which will take root as input
for boundary condition if root=NULL return 0 height otherwise find max of right and left height from that node and return it
now in the main function if root==null mean no node hence balanced tree so return true.
other wise return the same function with root->right && root->left && abs(height(root->left)-height(root->right))<=1;
