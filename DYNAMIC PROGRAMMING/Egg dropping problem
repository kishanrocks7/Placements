using recursion

 int solve(int e,int f)
    {
        if(f==0 || f==1)
        {
            return f;
        }
        if(e==1)
        {
            return f;
        }
        
        int mini=INT_MAX;
        
        for(int k=1,k<=f;k++)
        {
            int temp=1+max(solve(e-1,k-1),solve(e,f-k));
            mini=min(min,temp);
        }
        return min;
    }
    
    using dynamic programming
    
    public:int dp[501][501];
    int solve(int e,int f)
    {
        if(f==0 || f==1)
        {
            return f;
        }
        if(e==1)
        {
            return f;
        }
        if(dp[e][f]!=-1)
        {
            return dp[e][f];
        }
        
        int mini=INT_MAX;
        
        for(int k=1,k<=f;k++)
        {
            int temp=1+max(solve(e-1,k-1),solve(e,f-k));
            mini=min(min,temp);
        }
        return dp[e][f]=mini;
    }
    
